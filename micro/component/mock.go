// Code generated by mockery 2.7.5. DO NOT EDIT.

package component

import (
	context "context"

	model "github.com/nacos-group/nacos-sdk-go/model"
	echoswagger "github.com/pangpanglabs/echoswagger/v2"
	mock "github.com/stretchr/testify/mock"

	conf "github.com/kiga-hub/common/conf"
	micro "github.com/kiga-hub/common/micro"
)

// MockComponent is an autogenerated mock type for the MockComponent type
type MockComponent struct {
	mock.Mock
}

// GetSubscribeServiceList provides a mock function with given fields:
func (_m *MockComponent) GetSubscribeServiceList() []string {
	ret := _m.Called()

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// Init provides a mock function with given fields: server
func (_m *MockComponent) Init(server *micro.Server) error {
	ret := _m.Called(server)

	var r0 error
	if rf, ok := ret.Get(0).(func(*micro.Server) error); ok {
		r0 = rf(server)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Name provides a mock function with given fields:
func (_m *MockComponent) Name() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// OnConfigChanged provides a mock function with given fields: _a0
func (_m *MockComponent) OnConfigChanged(_a0 *conf.NodeConfig) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*conf.NodeConfig) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// OnServiceChanged provides a mock function with given fields: services, err
func (_m *MockComponent) OnServiceChanged(services []model.SubscribeService, err error) {
	_m.Called(services, err)
}

// PostInit provides a mock function with given fields: ctx
func (_m *MockComponent) PostInit(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PostStart provides a mock function with given fields: ctx
func (_m *MockComponent) PostStart(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PostStop provides a mock function with given fields: ctx
func (_m *MockComponent) PostStop(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PreInit provides a mock function with given fields: ctx
func (_m *MockComponent) PreInit(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PreStart provides a mock function with given fields: ctx
func (_m *MockComponent) PreStart(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PreStop provides a mock function with given fields: ctx
func (_m *MockComponent) PreStop(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetDynamicConfig provides a mock function with given fields: _a0
func (_m *MockComponent) SetDynamicConfig(_a0 *conf.NodeConfig) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*conf.NodeConfig) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetupHandler provides a mock function with given fields: root, base
func (_m *MockComponent) SetupHandler(root echoswagger.ApiRoot, base string) error {
	ret := _m.Called(root, base)

	var r0 error
	if rf, ok := ret.Get(0).(func(echoswagger.ApiRoot, string) error); ok {
		r0 = rf(root, base)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Start provides a mock function with given fields: ctx
func (_m *MockComponent) Start(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Status provides a mock function with given fields:
func (_m *MockComponent) Status() *micro.ComponentStatus {
	ret := _m.Called()
	var r1 *micro.ComponentStatus
	if rf, ok := ret.Get(1).(func() *micro.ComponentStatus); ok {
		r1 = rf()
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*micro.ComponentStatus)
		}
	}

	return r1
}

// Stop provides a mock function with given fields: ctx
func (_m *MockComponent) Stop(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
