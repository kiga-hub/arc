image: golang:1.20.8-bullseye

variables:
  PROJECT_NAME: common
  GOOS: linux
  GOARCH: amd64

cache:
  key: ${CI_COMMIT_REF_SLUG}

before_script:
  - export GO111MODULE=on
  - export REPO_NAME=`echo $CI_PROJECT_URL|sed 's/.*:\/\///g;'`
  - mkdir -p $GOPATH/src/$(dirname $REPO_NAME)
  - ln -svf $CI_PROJECT_DIR $GOPATH/src/$REPO_NAME
  - cd $GOPATH/src/$REPO_NAME

stages:
  - check
  - static

format:
  stage: check
  script:
    - go env -w GOPRIVATE=""
    - go env -w GOINSECURE=""
    - go env -w GOPROXY="https://goproxy.golang.org,goproxy.cn,goproxy.io,direct"
    - gofmt -l .
    - count1=$(gofmt -l . | wc -l)
    - goimports -l .
    - count2=$(goimports -l . | wc -l)
    - goreturns -l .
    - count3=$(goreturns -l . | wc -l)
    - if [[ "$count1" -ne "0" || "$count2" -ne "0" || "$count3" -ne "0" ]]; then exit 1; else exit 0; fi

all-check:
  stage: check
  script:
    - go env -w GOPRIVATE=""
    - go env -w GOINSECURE=""
    - go env -w GOPROXY="https://goproxy.golang.org,goproxy.cn,goproxy.io,direct"
    - golint -set_exit_status $(go list ./... | grep -v /vendor/)
    - golint -set_exit_status $(go list ./... | grep -v /vendor/) > report/golint-report.out
    - go vet $(go list ./... | grep -v /vendor/ | grep cpp/def.go)
    - go vet $(go list ./... | grep -v /vendor/ | grep cpp/def.go) 2> report/govet-report.out
    - golangci-lint run -v --timeout=15m
    - go test $(go list ./... | grep -v /vendor/)
    - go test $(go list ./... | grep -v /vendor/ ) -json > report/test.json
    - go test $(go list ./... | grep -v /vendor/ ) -short -coverprofile=report/coverage.out
  artifacts:
    name: report
    paths:
      - report

sonar-scanner:
  stage: static
  image:
    name: sonar-scanner-cli:stable
    entrypoint: [""]
  dependencies:
    - all-check
  script:
    - sonar-scanner -Dsonar.projectKey=$CI_PROJECT_NAMESPACE-$PROJECT_NAME -Dsonar.host.url=http:/ip:9000 -Dsonar.login=$SONAR_TOKEN
  only:
    - master
