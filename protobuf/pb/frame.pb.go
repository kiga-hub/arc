// Code generated by protoc-gen-go. DO NOT EDIT.
// source: frame.proto

package pb

import (
	context "context"
	fmt "fmt"
	math "math"

	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type FrameDataRequest struct {
	Key                  []byte   `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	Value                []byte   `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FrameDataRequest) Reset()         { *m = FrameDataRequest{} }
func (m *FrameDataRequest) String() string { return proto.CompactTextString(m) }
func (*FrameDataRequest) ProtoMessage()    {}
func (*FrameDataRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5379e2b825e15002, []int{0}
}

func (m *FrameDataRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FrameDataRequest.Unmarshal(m, b)
}
func (m *FrameDataRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FrameDataRequest.Marshal(b, m, deterministic)
}
func (m *FrameDataRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FrameDataRequest.Merge(m, src)
}
func (m *FrameDataRequest) XXX_Size() int {
	return xxx_messageInfo_FrameDataRequest.Size(m)
}
func (m *FrameDataRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FrameDataRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FrameDataRequest proto.InternalMessageInfo

func (m *FrameDataRequest) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *FrameDataRequest) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

type FrameDataResponse struct {
	Successed            bool     `protobuf:"varint,1,opt,name=successed,proto3" json:"successed,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FrameDataResponse) Reset()         { *m = FrameDataResponse{} }
func (m *FrameDataResponse) String() string { return proto.CompactTextString(m) }
func (*FrameDataResponse) ProtoMessage()    {}
func (*FrameDataResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5379e2b825e15002, []int{1}
}

func (m *FrameDataResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FrameDataResponse.Unmarshal(m, b)
}
func (m *FrameDataResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FrameDataResponse.Marshal(b, m, deterministic)
}
func (m *FrameDataResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FrameDataResponse.Merge(m, src)
}
func (m *FrameDataResponse) XXX_Size() int {
	return xxx_messageInfo_FrameDataResponse.Size(m)
}
func (m *FrameDataResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_FrameDataResponse.DiscardUnknown(m)
}

var xxx_messageInfo_FrameDataResponse proto.InternalMessageInfo

func (m *FrameDataResponse) GetSuccessed() bool {
	if m != nil {
		return m.Successed
	}
	return false
}

func init() {
	proto.RegisterType((*FrameDataRequest)(nil), "proto.FrameDataRequest")
	proto.RegisterType((*FrameDataResponse)(nil), "proto.FrameDataResponse")
}

func init() { proto.RegisterFile("frame.proto", fileDescriptor_5379e2b825e15002) }

var fileDescriptor_5379e2b825e15002 = []byte{
	// 170 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4e, 0x2b, 0x4a, 0xcc,
	0x4d, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x05, 0x53, 0x4a, 0x56, 0x5c, 0x02, 0x6e,
	0x20, 0x51, 0x97, 0xc4, 0x92, 0xc4, 0xa0, 0xd4, 0xc2, 0xd2, 0xd4, 0xe2, 0x12, 0x21, 0x01, 0x2e,
	0xe6, 0xec, 0xd4, 0x4a, 0x09, 0x26, 0x05, 0x46, 0x0d, 0x9e, 0x20, 0x10, 0x53, 0x48, 0x84, 0x8b,
	0xb5, 0x2c, 0x31, 0xa7, 0x34, 0x55, 0x82, 0x19, 0x2c, 0x06, 0xe1, 0x28, 0x19, 0x72, 0x09, 0x22,
	0xe9, 0x2d, 0x2e, 0xc8, 0xcf, 0x2b, 0x4e, 0x15, 0x92, 0xe1, 0xe2, 0x2c, 0x2e, 0x4d, 0x4e, 0x4e,
	0x2d, 0x2e, 0x4e, 0x4d, 0x91, 0x60, 0x54, 0x60, 0xd4, 0xe0, 0x08, 0x42, 0x08, 0x18, 0x85, 0x73,
	0x71, 0xc2, 0xb5, 0x08, 0x79, 0x21, 0xe9, 0x77, 0x4e, 0xcc, 0xc9, 0x49, 0x4a, 0x4c, 0xce, 0x16,
	0x12, 0x87, 0xb8, 0x4f, 0x0f, 0xdd, 0x55, 0x52, 0x12, 0x98, 0x12, 0x10, 0x2b, 0x95, 0x18, 0x34,
	0x18, 0x9d, 0x58, 0xa2, 0x98, 0x0a, 0x92, 0x92, 0xd8, 0xc0, 0x4a, 0x8c, 0x01, 0x01, 0x00, 0x00,
	0xff, 0xff, 0xa9, 0xd8, 0xdb, 0xf5, 0xea, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// FrameDataClient is the client API for FrameData service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FrameDataClient interface {
	FrameDataCallback(ctx context.Context, opts ...grpc.CallOption) (FrameData_FrameDataCallbackClient, error)
}

type frameDataClient struct {
	cc *grpc.ClientConn
}

func NewFrameDataClient(cc *grpc.ClientConn) FrameDataClient {
	return &frameDataClient{cc}
}

func (c *frameDataClient) FrameDataCallback(ctx context.Context, opts ...grpc.CallOption) (FrameData_FrameDataCallbackClient, error) {
	stream, err := c.cc.NewStream(ctx, &_FrameData_serviceDesc.Streams[0], "/proto.FrameData/FrameDataCallback", opts...)
	if err != nil {
		return nil, err
	}
	x := &frameDataFrameDataCallbackClient{stream}
	return x, nil
}

type FrameData_FrameDataCallbackClient interface {
	Send(*FrameDataRequest) error
	CloseAndRecv() (*FrameDataResponse, error)
	grpc.ClientStream
}

type frameDataFrameDataCallbackClient struct {
	grpc.ClientStream
}

func (x *frameDataFrameDataCallbackClient) Send(m *FrameDataRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *frameDataFrameDataCallbackClient) CloseAndRecv() (*FrameDataResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(FrameDataResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FrameDataServer is the server API for FrameData service.
type FrameDataServer interface {
	FrameDataCallback(FrameData_FrameDataCallbackServer) error
}

// UnimplementedFrameDataServer can be embedded to have forward compatible implementations.
type UnimplementedFrameDataServer struct {
}

func (*UnimplementedFrameDataServer) FrameDataCallback(srv FrameData_FrameDataCallbackServer) error {
	return status.Errorf(codes.Unimplemented, "method FrameDataCallback not implemented")
}

func RegisterFrameDataServer(s *grpc.Server, srv FrameDataServer) {
	s.RegisterService(&_FrameData_serviceDesc, srv)
}

func _FrameData_FrameDataCallback_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FrameDataServer).FrameDataCallback(&frameDataFrameDataCallbackServer{stream})
}

type FrameData_FrameDataCallbackServer interface {
	SendAndClose(*FrameDataResponse) error
	Recv() (*FrameDataRequest, error)
	grpc.ServerStream
}

type frameDataFrameDataCallbackServer struct {
	grpc.ServerStream
}

func (x *frameDataFrameDataCallbackServer) SendAndClose(m *FrameDataResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *frameDataFrameDataCallbackServer) Recv() (*FrameDataRequest, error) {
	m := new(FrameDataRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _FrameData_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.FrameData",
	HandlerType: (*FrameDataServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "FrameDataCallback",
			Handler:       _FrameData_FrameDataCallback_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "frame.proto",
}
